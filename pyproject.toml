[tool.poetry]
name = "microservice-system"
version = "0.1.0"
description = ""
authors = ["Artem Jasan <artjasan@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
alembic = "^1.12.0"
asyncpg = "^0.28.0"
fastapi = "^0.101.1"
pydantic-settings = "^2.0.3"
sentry-sdk = "^1.31.0"
sqlalchemy = {extras = ["mypy"], version = "^2.0.20"}
uvicorn = "^0.23.2"
pydantic = "^2.4.2"
uuid = "^1.30"
sqlalchemy-utils = "^0.41.1"
fastavro = "^1.8.4"
aio-pika = "^9.3.0"

[tool.poetry.dev-dependencies]
black = "^23.7.0"
mypy = "^1.5.1"
pytest = "^7.4.1"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
ruff = "^0.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = """
    --show-capture=all
    --cov-report xml
    --cov-report term:skip-covered
"""
asyncio_mode = "auto"

[tool.coverage.run]
branch = true

[tool.pylint.reports]
reports = true

# Sections below are for linters config (ruff, autopep8 and mypy)
[tool.ruff]
output-format = "grouped"
line-length = 120
select = [
    "F",   # flake8 / pyflakes
    "E",   # flake8 / pycodestyle, errors
    "W",   # flake8 / pycodestyle, warning
    "C90", # McCabe
    "I",   # isort
    "N",   # pep8 naming, might already by checked by PyLint
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "S",   # bandit
    "A",   # builtins
    "RUF", # ruff specific
]
extend-ignore = [
    "A003",  # builtin-attribute-shadowing
    "D105",  # undocumented-magic-method
    "D107",  # undocumented-public-init
    "D203",  # one-blank-line-before-class
    "D213",  # multi-line-summary-second-line
]

[tool.ruff.isort]
combine-as-imports = true

[tool.ruff.mccabe]
max-complexity = 5

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/**" = ["S101"]  # don't check asserts in tests

[tool.mypy]
mypy_path = "microservice_system"
strict = true
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

[tool.black]
line_length = 120
include = '\.pyi?$'
exclude = '''
/(
  | \.venv
  | migrations
)/
'''
